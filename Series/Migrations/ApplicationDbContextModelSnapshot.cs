// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Series.Data;

namespace Series.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Series.Model.Episodio", b =>
                {
                    b.Property<int>("EpisodioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Orden")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("YoutubeVideoId")
                        .HasColumnType("int");

                    b.HasKey("EpisodioId");

                    b.HasIndex("TemporadaId");

                    b.ToTable("Episodio");
                });

            modelBuilder.Entity("Series.Model.Imagen", b =>
                {
                    b.Property<int>("ImagenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Temporal")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ImagenId");

                    b.ToTable("Imagen");
                });

            modelBuilder.Entity("Series.Model.Lista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Lista");
                });

            modelBuilder.Entity("Series.Model.Serie", b =>
                {
                    b.Property<int>("SerieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ImagenId")
                        .HasColumnType("int");

                    b.Property<string>("NombreSerie")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("SerieId");

                    b.HasIndex("ImagenId");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("Series.Model.Temporada", b =>
                {
                    b.Property<int>("TemporadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreTemporada")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Orden")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("TemporadaId");

                    b.HasIndex("SerieId");

                    b.ToTable("Temporada");
                });

            modelBuilder.Entity("Series.Model.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreCompleto")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Series.Model.Episodio", b =>
                {
                    b.HasOne("Series.Model.Temporada", "Temporada")
                        .WithMany("Episodios")
                        .HasForeignKey("TemporadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Series.Model.Lista", b =>
                {
                    b.HasOne("Series.Model.Serie", "Serie")
                        .WithMany("ListaFavoritos")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Series.Model.Usuario", "Usuario")
                        .WithMany("ListaFavoritos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Series.Model.Serie", b =>
                {
                    b.HasOne("Series.Model.Imagen", "Imagen")
                        .WithMany("Series")
                        .HasForeignKey("ImagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("Series.Model.Temporada", b =>
                {
                    b.HasOne("Series.Model.Serie", "Serie")
                        .WithMany("Temporadas")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("Series.Model.Imagen", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("Series.Model.Serie", b =>
                {
                    b.Navigation("ListaFavoritos");

                    b.Navigation("Temporadas");
                });

            modelBuilder.Entity("Series.Model.Temporada", b =>
                {
                    b.Navigation("Episodios");
                });

            modelBuilder.Entity("Series.Model.Usuario", b =>
                {
                    b.Navigation("ListaFavoritos");
                });
#pragma warning restore 612, 618
        }
    }
}
